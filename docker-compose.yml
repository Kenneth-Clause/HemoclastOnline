services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hemoclast_postgres
    environment:
      POSTGRES_DB: hemoclast_db
      POSTGRES_USER: hemoclast
      POSTGRES_PASSWORD: hemoclast
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - hemoclast_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hemoclast -d hemoclast_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hemoclast_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hemoclast_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hemoclast_backend
    environment:
      DATABASE_URL: postgresql+asyncpg://hemoclast:hemoclast@postgres:5432/hemoclast_db
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY:-KmUqufoZ433itTJt4anRHRjAUxkcx3xKN58KfaAZQ88}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - hemoclast_network
    restart: unless-stopped

  # Frontend Development Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hemoclast_frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - hemoclast_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  hemoclast_network:
    driver: bridge
